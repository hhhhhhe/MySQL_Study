相同点：drop、delete、truncate 都是删除表的内容。

不同点：drop > truncate > delete

一、delete

delete：删除表的内容，表的结构还存在，不释放空间，可以回滚恢复；

delete：

（1）删除制定数据：删除表test中年龄等于30且国家为US的数据：delete from test where age=30 and country =‘US’；

（2）删除整个表：仅删除表test内的所有内容，保留表的定义，不释放空间：delete from test 或delete *from test


1、delete是DML，执行delete操作时，每次从表中删除一行，并且同时将该行的的删除操作记录在redo和undo表空间中以便进行回滚（rollback）和重做操作，但要注意表空间要足够大，需要手动提交（commit）操作才能生效，可以通过rollback撤消操作。

2、delete可根据条件删除表中满足条件的数据，如果不指定where子句，那么删除表中所有记录。

3、delete语句不影响表所占用的extent，高水线(high watermark)保持原位置不变。

二、truncate

truncate：删除表的内容，表的结构存在，可以释放空间,没有备份表之前要慎用；

truncate：truncate test 删除表test里的内容，并释放空间，但不删除表的定义，表的结构还在

1、truncate是DDL，会隐式提交，所以，不能回滚，不会触发触发器。

2、truncate会删除表中所有记录，并且将重新设置高水线和所有的索引，缺省情况下将空间释放到minextents个extent，除非使用reuse storage，。不会记录日志，所以执行速度很快，但不能通过rollback撤消操作（如果一不小心把一个表truncate掉，也是可以恢复的，只是不能通过rollback来恢复）。

3、对于外键（foreignkey ）约束引用的表，不能使用 truncate table，而应使用不带 where 子句的 delete 语句。

4、truncatetable不能用于参与了索引视图的表。

三、drop

drop：删除表内容和结构，释放空间，没有备份表之前要慎用；

drop：drop test 删除表test，并释放空间，将test删除的一干二净

1、drop是DDL，会隐式提交，所以，不能回滚，不会触发触发器。

2、drop语句删除表结构及所有数据，并将表所占用的空间全部释放。

3、drop语句将删除表的结构所依赖的约束，触发器，索引，依赖于该表的存储过程/函数将保留,但是变为invalid状态。